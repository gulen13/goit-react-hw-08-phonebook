{"version":3,"file":"static/js/236.3c964d9a.chunk.js","mappings":"6QAOMA,GAAmBC,EAAAA,EAAAA,IAAO,CAC9BC,MAAMC,EAAAA,EAAAA,MAASC,IAAI,GAAGC,WACtBC,OAAOH,EAAAA,EAAAA,MAASG,QAAQD,WACxBE,UAAUJ,EAAAA,EAAAA,MAASC,IAAI,GAAGC,aACzBA,WAEUG,EAAe,WAAO,IAAD,MAC1BC,GAAWC,EAAAA,EAAAA,MAEjB,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYb,KALtBc,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,WAHF,IAIEC,UAAaC,EAJf,EAIeA,OAAQC,EAJvB,EAIuBA,QAqBvB,OACE,kBAAMC,SAAUL,GAfD,SAAC,GAA+B,IAA7Bb,EAA4B,EAA5BA,KAAMI,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/BE,GACEY,EAAAA,EAAAA,IAAa,CACXnB,KAAMA,EACNI,MAAOA,EACPC,SAAUA,KAPKe,EAAAA,GAAAA,QAAc,2BAWjCN,EAAW,QACXA,EAAW,SACXA,EAAW,WACZ,IAGyCO,aAAa,MAArD,WACE,6BAAO,YAEL,0BAAOC,KAAK,QAAWV,EAAS,WAChC,iCAAII,EAAOhB,YAAX,aAAI,EAAauB,cAEnB,6BAAO,SAEL,0BAAOD,KAAK,SAAYV,EAAS,YACjC,iCAAII,EAAOZ,aAAX,aAAI,EAAcmB,cAEpB,6BAAO,YAEL,0BAAOD,KAAK,YAAeV,EAAS,eACpC,iCAAII,EAAOX,gBAAX,aAAI,EAAiBkB,cAEvB,mBAAQD,KAAK,SAASE,UAAWP,EAAjC,SAA0C,eAK/C,EC7Dc,SAASQ,IACtB,OACE,4BACE,2BAAO,kBACP,SAACnB,EAAD,MAGL,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { registerUser } from 'redux/auth/AuthOperations';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { object, string } from 'yup';\nimport { toast } from 'react-hot-toast';\n\nconst validationSchema = object({\n  name: string().min(4).required(),\n  email: string().email().required(),\n  password: string().min(6).required(),\n}).required();\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    resetField,\n    formState: { errors, isDirty },\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const notify = () => toast.success('Registered successfuly!');\n\n  const onSubmit = ({ name, email, password }) => {\n    dispatch(\n      registerUser({\n        name: name,\n        email: email,\n        password: password,\n      })\n    );\n    notify();\n    resetField('name');\n    resetField('email');\n    resetField('password');\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} autoComplete=\"off\">\n      <label>\n        Username\n        <input type=\"text\" {...register('name')} />\n        <p>{errors.name?.message}</p>\n      </label>\n      <label>\n        Email\n        <input type=\"email\" {...register('email')} />\n        <p>{errors.email?.message}</p>\n      </label>\n      <label>\n        Password\n        <input type=\"password\" {...register('password')} />\n        <p>{errors.password?.message}</p>\n      </label>\n      <button type=\"submit\" disabled={!isDirty}>\n        Register\n      </button>\n    </form>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <title>Registration</title>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["validationSchema","object","name","string","min","required","email","password","RegisterForm","dispatch","useDispatch","useForm","resolver","yupResolver","register","handleSubmit","resetField","formState","errors","isDirty","onSubmit","registerUser","toast","autoComplete","type","message","disabled","Register"],"sourceRoot":""}