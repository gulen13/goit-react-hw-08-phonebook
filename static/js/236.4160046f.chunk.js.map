{"version":3,"file":"static/js/236.4160046f.chunk.js","mappings":"2SASMA,GAAmBC,EAAAA,EAAAA,IAAO,CAC9BC,MAAMC,EAAAA,EAAAA,MAASC,IAAI,GAAGC,WACtBC,OAAOH,EAAAA,EAAAA,MAASG,QAAQD,WACxBE,UAAUJ,EAAAA,EAAAA,MAASC,IAAI,GAAGC,aACzBA,WAEUG,EAAe,WAAO,IAAD,MAC1BC,GAAWC,EAAAA,EAAAA,MAEjB,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYb,KALtBc,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,WAHF,IAIEC,UAAaC,EAJf,EAIeA,OAAQC,EAJvB,EAIuBA,QAuBvB,OACE,SAACC,EAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTC,eAAgB,SAChBC,GAAI,GACJC,GAAI,OACJC,GAAI,OACJC,OAAQ,EACRC,aAAc,EACdC,EAAG,EACHC,SAAU,KAVd,UAaE,iBAAMC,SAAUhB,GAhCH,SAAC,GAA+B,IAA7Bb,EAA4B,EAA5BA,KAAMI,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/BE,GACEuB,EAAAA,EAAAA,IAAa,CACX9B,KAAMA,EACNI,MAAOA,EACPC,SAAUA,KAGX0B,SACAC,MAAK,SAAAC,GACJC,EAAAA,GAAAA,QAAA,kCAAyCD,EAASE,KAAKnC,KAAvD,KACD,IACAoC,OAAM,kBAAMF,EAAAA,GAAAA,MAAY,0BAAlB,IACTpB,EAAW,QACXA,EAAW,SACXA,EAAW,WACZ,IAgB2CuB,aAAa,MAArD,UACE,UAACnB,EAAA,EAAD,CACEC,GAAI,CACFC,QAAS,OACTkB,cAAe,SACfC,WAAY,SACZC,IAAK,EACLC,MAAO,KANX,WASE,6BAAO,YAEL,SAACC,EAAA,IAAD,QACEvC,UAAQ,EACRwC,KAAK,OACLC,QAAQ,WACRC,MAAM,OACN1B,GAAI,CACFG,GAAI,EACJmB,MAAO,MAEL7B,EAAS,WAEf,iCAAII,EAAOhB,YAAX,aAAI,EAAa8C,cAEnB,6BAAO,SAEL,SAACJ,EAAA,IAAD,QACEvC,UAAQ,EACRwC,KAAK,QACLC,QAAQ,WACRC,MAAM,OACN1B,GAAI,CACFG,GAAI,EACJmB,MAAO,MAEL7B,EAAS,YAEf,iCAAII,EAAOZ,aAAX,aAAI,EAAc0C,cAEpB,6BAAO,YAEL,SAACJ,EAAA,IAAD,QACEvC,UAAQ,EACRwC,KAAK,WACLC,QAAQ,WACRC,MAAM,OACN1B,GAAI,CACFG,GAAI,EACJmB,MAAO,MAEL7B,EAAS,eAEf,iCAAII,EAAOX,gBAAX,aAAI,EAAiByC,cAEvB,SAACC,EAAA,EAAD,CACEH,QAAQ,YACRD,KAAK,SACLxB,GAAI,CACFsB,MAAO,KAETO,UAAW/B,EANb,SAOC,mBAOV,EC9Hc,SAASgC,IACtB,OACE,4BACE,2BAAO,kBACP,SAAC3C,EAAD,MAGL,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { registerUser } from 'redux/auth/AuthOperations';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { object, string } from 'yup';\nimport { toast } from 'react-hot-toast';\nimport { Box, Button } from '@mui/material';\nimport Input from '@mui/joy/Input';\n\nconst validationSchema = object({\n  name: string().min(4).required(),\n  email: string().email().required(),\n  password: string().min(6).required(),\n}).required();\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    resetField,\n    formState: { errors, isDirty },\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const onSubmit = ({ name, email, password }) => {\n    dispatch(\n      registerUser({\n        name: name,\n        email: email,\n        password: password,\n      })\n    )\n      .unwrap()\n      .then(response => {\n        toast.success(`Registered successfuly, ${response.user.name}!`);\n      })\n      .catch(() => toast.error('Something went wrong...'));\n    resetField('name');\n    resetField('email');\n    resetField('password');\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        justifyContent: 'center',\n        mt: 12,\n        ml: 'auto',\n        mr: 'auto',\n        border: 1,\n        borderRadius: 2,\n        p: 2,\n        maxWidth: 300,\n      }}\n    >\n      <form onSubmit={handleSubmit(onSubmit)} autoComplete=\"off\">\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            gap: 2,\n            width: 300,\n          }}\n        >\n          <label>\n            Username\n            <Input\n              required\n              type=\"text\"\n              variant=\"outlined\"\n              color=\"info\"\n              sx={{\n                mt: 1,\n                width: 250,\n              }}\n              {...register('name')}\n            />\n            <p>{errors.name?.message}</p>\n          </label>\n          <label>\n            Email\n            <Input\n              required\n              type=\"email\"\n              variant=\"outlined\"\n              color=\"info\"\n              sx={{\n                mt: 1,\n                width: 250,\n              }}\n              {...register('email')}\n            />\n            <p>{errors.email?.message}</p>\n          </label>\n          <label>\n            Password\n            <Input\n              required\n              type=\"password\"\n              variant=\"outlined\"\n              color=\"info\"\n              sx={{\n                mt: 1,\n                width: 250,\n              }}\n              {...register('password')}\n            />\n            <p>{errors.password?.message}</p>\n          </label>\n          <Button\n            variant=\"contained\"\n            type=\"submit\"\n            sx={{\n              width: 250,\n            }}\n            disabled={!isDirty}\n          >\n            Register\n          </Button>\n        </Box>\n      </form>\n    </Box>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <title>Registration</title>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["validationSchema","object","name","string","min","required","email","password","RegisterForm","dispatch","useDispatch","useForm","resolver","yupResolver","register","handleSubmit","resetField","formState","errors","isDirty","Box","sx","display","justifyContent","mt","ml","mr","border","borderRadius","p","maxWidth","onSubmit","registerUser","unwrap","then","response","toast","user","catch","autoComplete","flexDirection","alignItems","gap","width","Input","type","variant","color","message","Button","disabled","Register"],"sourceRoot":""}